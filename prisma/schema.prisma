// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
}

model Profile {
    github    String   @id
    name      String?
    avatar    String?
    bio       String?
    followers Int      @default(0)
    location  String?
    website   String?
    twitter   String?
    hireable  Boolean  @default(true)
    published Boolean  @default(false)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    syncedAt  DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Repository {
    id            Int     @id @unique
    name          String
    description   String?
    url           String
    star_count    Int
    watcher_count Int
    owner_id      Int
    owner_name    String
    published     Boolean @default(false)
    avatar        String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
